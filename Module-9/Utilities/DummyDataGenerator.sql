{"version":"NotebookV1","origId":3623476344927822,"name":"DummyDataGenerator","language":"sql","commands":[{"version":"CommandV1","origId":3623476344927823,"guid":"f7a558f7-20dc-4ca8-89d0-976a8a84b5da","subtype":"command","commandType":"auto","position":1.0,"command":"\n%python\ndef createDummyData(tableName, databaseName=None, seed=None, rows=10000, name=\"Name\", id=\"ID\", password=\"Password\", amount=\"Amount\", percent=\"Percent\", probability=\"Probability\", yesNo=\"YesNo\", UTCTime=\"UTCTime\"): \n  \n  # usage:\n  #  use \"EmployeeName\" in place of default \"Name\" column\n  #  df = createDummyData(tableName=\"whatever\", rows=100, name=\"EmployeeName\")\n  #\n  # returns: DataFrame\n  \n  import sys, string, decimal, time, random, os\n  from builtins import round\n  from pyspark.sql import Row\n  from pyspark.sql.functions import when, length, col\n\n  # Pull from environment, don't assume global variables.\n  username = spark.conf.get(\"com.databricks.training.username\")\n  userhome = spark.conf.get(\"com.databricks.training.userhome\")\n  \n  dbName = databaseName\n  if dbName is None:\n    dbName = username\n    for char in [\"-\", \"=\", \"[\", \"]\", \"\\\\\", \";\", \"\\'\", \",\", \".\", \"/\", \"!\", \"@\", \"#\", \"$\", \"%\", \"^\", \"&\", \"*\", \"(\", \")\", \"+\", \"{\", \"}\", \"|\", \":\", \"\\\"\", \"<\", \">\", \"?\"]:\n      dbName = dbName.replace(char, \"_\")\n    \n  spark.sql(\"CREATE DATABASE IF NOT EXISTS {}\".format(dbName))\n                   \n  ipsum = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud   exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"\n           \n  ipsum = ipsum.replace(\".\", \"\").replace(\",\", \"\").lower().split(\" \")\n\n  # sadly, we can't use the hash function from builtins\n  # https://stackoverflow.com/questions/27522626/hash-function-in-python-3-3-returns-different-results-between-sessions\n  \n  \n  bigList = []\n\n         \n  def setSeed(i, seed):\n    import hashlib\n    \n    if seed is None:\n      hashObject = hashlib.sha1(bytes(userhome, encoding=\"utf-8\"))\n      hashSeed = int(hashObject.hexdigest(), 16)\n      \n    else:       \n      hashObject = hashlib.sha1(bytes(seed, encoding=\"utf-8\"))\n      hashSeed = int(hashObject.hexdigest(), 16)\n      \n    random.seed(hashSeed + i)\n      \n    return None \n  \n  \n  for i in range(0, rows):\n    \n        \n    setSeed(i, seed)\n    \n    def firstName(): \n      return str(ipsum[random.randint(1, len(ipsum)-1)]).capitalize() \n    \n    def lastName():\n      return str(ipsum[random.randint(1, len(ipsum)-1)]).capitalize()\n    \n    def randomName():\n      return firstName() + \" \" + lastName()\n      \n    # return str(ipsum[rand.randint(1, len(ipsum)-1)]).capitalize() + \" \" + str(ipsum[rand.randint(1, len(ipsum)-1)]).capitalize()\n\n    # various sizes of random integers\n    def randomInt1to100(): \n      return random.randint(1,100)\n\n    def randomInt1to1000(): \n      return random.randint(1,1000)\n\n    def randomInt1toMax(): \n      return random.randint(1, sys.maxsize)\n\n    def randomDouble():\n      return random.random()\n\n    def randomBoolean():\n      return random.choice([True, False])\n\n    # random password  \n    def randomString():\n      chars = string.ascii_letters + string.digits\n      return ''.join(random.choice(chars) for i in range(8,20))\n\n    # random money amount\n    def randomAmount(): \n      return float(decimal.Decimal(random.randrange(0, 1000000))/100)\n\n    # random timestamp in UTC format from Jan 1, 2000 to now\n    def randomUTCTimestamp():\n      return random.randint(946684800, round(time.time()))  \n\n    # def randomList():\n    # return (list(Row(i, randomName(), randomInt1toMax(), randomString(), randomAmount(), randomInt1to100(), randomDouble(), randomBoolean(), randomUTCTimestamp())) for j in range(rows))\n    bigList.append(list(Row(i, randomName(), randomInt1toMax(), randomString(), randomAmount(), randomInt1to100(), randomDouble(), randomBoolean(), randomUTCTimestamp())))\n    \n     # return bigList.append(list(Row(i, randomName(), randomInt1toMax(), randomString(), randomAmount(), randomInt1to100(), randomDouble(), randomBoolean(), randomUTCTimestamp())))\n      #re\n\n    randomSchema = \"{} integer, {} string, {} long, {} string, {} double, {} integer, {} float, {} boolean, {} integer\".format(\"index\", name, id, password, amount, percent, probability, yesNo, UTCTime)\n\n  tempDF = spark.createDataFrame(bigList, randomSchema)\n  # tempDF = spark.createDataFrame(randomList(), randomSchema)\n\n  df = tempDF.withColumn(percent, when(col(percent) % 7 == 0, None).otherwise(col(percent)))\n\n  # Create the actual table\n  fullTableName = dbName + \".\" + tableName\n  df.write.mode(\"overwrite\").saveAsTable(fullTableName)  \n\n  # If the table existed or not, refresh it and re-initialize our dataframe.\n  spark.sql(\"REFRESH TABLE {}\".format(fullTableName))\n\n  return spark.read.table(fullTableName).orderBy(\"index\")\n  \nNone # Suppress output\n","commandVersion":0,"state":"finished","results":null,"errorSummary":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"nuid":"f9784780-0b10-4f42-8f39-194dd899a741"}],"dashboards":[],"guid":"c16c69a8-7537-4ecc-9ac9-03ef77588282","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{}}